{"ast":null,"code":"import _regeneratorRuntime from \"/Users/NukeZ/avata-coding-challenge/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/NukeZ/avata-coding-challenge/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/NukeZ/avata-coding-challenge/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/NukeZ/avata-coding-challenge/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/NukeZ/avata-coding-challenge/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/NukeZ/avata-coding-challenge/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/NukeZ/avata-coding-challenge/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/NukeZ/avata-coding-challenge/client/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Autocomplete from 'react-autocomplete';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: null,\n      searchText: ''\n    };\n    _this.callBackendAPI =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/express_backend');\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              body = _context.sent;\n              axios.post('https://di37ol03g7.execute-api.us-west-2.amazonaws.com/dev/').then(function (res) {\n                console.log(res);\n              }).catch(function (error) {\n                console.log(error);\n              });\n              console.log('gottems');\n\n              if (!(response.status !== 200)) {\n                _context.next = 10;\n                break;\n              }\n\n              throw Error(body.message);\n\n            case 10:\n              return _context.abrupt(\"return\", body);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Call our fetch function below once the component mounts\n      this.callBackendAPI().then(function (res) {\n        return _this2.setState({\n          data: res.express\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    } // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        className: \"App-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Welcome to React!\")), React.createElement(Autocomplete, {\n        getItemValue: function getItemValue(item) {\n          return item.label;\n        },\n        items: [{\n          label: 'apple'\n        }, {\n          label: 'banana'\n        }, {\n          label: 'pear'\n        }],\n        renderItem: function renderItem(item, isHighlighted) {\n          return React.createElement(\"div\", {\n            style: {\n              background: isHighlighted ? 'lightgray' : 'white'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, item.label);\n        },\n        value: true,\n        onChange: function onChange(e) {\n          return _this3.state.searchText = e.target.value;\n        },\n        onSelect: function onSelect(val) {\n          return _this3.state.searchText = val;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"App-intro\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, this.state.data));\n    }\n  }]);\n\n  return App;\n}(Component); // Render the newly fetched data inside of this.state.data\n\n\nexport default App;","map":{"version":3,"sources":["/Users/NukeZ/avata-coding-challenge/client/src/App.js"],"names":["React","Component","axios","Autocomplete","App","state","data","searchText","callBackendAPI","fetch","response","json","body","post","then","res","console","log","catch","error","status","Error","message","setState","express","err","logo","item","label","isHighlighted","background","e","target","value","val"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport Autocomplete from 'react-autocomplete';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\nstate = {\n    data: null,\n    searchText: ''\n  };\n\n  componentDidMount() {\n      // Call our fetch function below once the component mounts\n    this.callBackendAPI()\n      .then(res => this.setState({ data: res.express }))\n      .catch(err => console.log(err));\n  }\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  callBackendAPI = async () => {\n    const response = await fetch('/express_backend');\n    const body = await response.json();\n\n    axios.post('https://di37ol03g7.execute-api.us-west-2.amazonaws.com/dev/')\n      .then((res) => {\n        console.log(res);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    console.log('gottems');\n\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React!</h1>\n        </header>\n        <Autocomplete\n          getItemValue={(item) => item.label}\n          items={[\n            { label: 'apple' },\n            { label: 'banana' },\n            { label: 'pear' }\n          ]}\n          renderItem={(item, isHighlighted) =>\n            <div style={{ background: isHighlighted ? 'lightgray' : 'white' }}>\n              {item.label}\n            </div>\n          }\n          value\n          onChange={(e) => this.state.searchText = e.target.value}\n          onSelect={(val) => this.state.searchText = val}\n        />\n        <p className=\"App-intro\">{this.state.data}</p>\n      </div>\n    );\n  }\n}\n// Render the newly fetched data inside of this.state.data\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}