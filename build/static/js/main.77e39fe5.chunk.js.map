{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","selectedOption","searchSuggestionsArr","searchResultsArr","noAutoCompleteDuplicateObj","barData","barLabels","doughnutLabels","doughnutData","buildSearchSuggestionsArr","authorBookCountObj","authorsNumberOfBooks","1","2","3","_this","i","length","author","push","label","value","type","title","review_score","key","map","setState","onChangeInput","e","target","getBooks","_callee","regenerator_default","a","wrap","_context","prev","next","axios","post","then","res","results","sort","b","splice","catch","error","console","log","stop","handleChange","this","err","resultsListItems","book","react_default","createElement","className","summary","onKeyUp","react_select_esm","onChange","options","onClick","es","labels","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","width","height","maintainAspectRatio","scales","xAxes","yAxes","ticks","stepSize","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77e39fe5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport Select from 'react-select';\nimport { Bar, Doughnut } from 'react-chartjs-2';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    data: null,\n    selectedOption: '',\n    searchSuggestionsArr: [],\n    searchResultsArr: [],\n    noAutoCompleteDuplicateObj: {},\n    barData: [],\n    barLabels: [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],\n    doughnutLabels: [\n      '1 book',\n      '2 books',\n      '3+ books'\n    ],\n    doughnutData: []\n  };\n\n  buildSearchSuggestionsArr = () => {\n    const searchSuggestionsArr = [];\n    const noAutoCompleteDuplicateObj = {};\n    const authorBookCountObj = {};\n    const authorsNumberOfBooks = { 1: 0, 2: 0, 3: 0};\n    const searchResultsArr = this.state.searchResultsArr;\n\n    for (let i = 1; i <= searchResultsArr.length - 1; i++) {\n\n      //prevents duplicate auto suggestions\n      if (!noAutoCompleteDuplicateObj[searchResultsArr[i].author]) {\n        searchSuggestionsArr.push({ label: 'Author: ' + (searchResultsArr[i].author || 'Anonymous'), value: searchResultsArr[i].author, type: 'author' });\n        noAutoCompleteDuplicateObj[searchResultsArr[i].author] = [];\n        authorBookCountObj[searchResultsArr[i].author] = 0;\n      }\n\n      //assuming no duplicate titles\n      if (!noAutoCompleteDuplicateObj[searchResultsArr[i].title]) {\n        searchSuggestionsArr.push({ label: 'Title: ' + searchResultsArr[i].title, value: searchResultsArr[i].title, type: 'title' });\n        noAutoCompleteDuplicateObj[searchResultsArr[i].title] = [];\n      }\n\n      //prevents duplicate auto suggestions\n      if (!noAutoCompleteDuplicateObj[searchResultsArr[i].review_score]) {\n        searchSuggestionsArr.push({ label: 'Review Score: ' + searchResultsArr[i].review_score, value: searchResultsArr[i].review_score, type: 'review_score' });\n        noAutoCompleteDuplicateObj[searchResultsArr[i].review_score] = [];\n\n      }\n\n      //bundles all books with the same author or review score together so we can filter results\n      noAutoCompleteDuplicateObj[searchResultsArr[i].author].push(searchResultsArr[i]);\n      noAutoCompleteDuplicateObj[searchResultsArr[i].title].push(searchResultsArr[i]);\n      noAutoCompleteDuplicateObj[searchResultsArr[i].review_score].push(searchResultsArr[i]);\n\n      //counts how many books each author has\n      authorBookCountObj[searchResultsArr[i].author]++;\n    }\n\n    //counts how many authors have 1, 2, 3+ books\n    for (let key in authorBookCountObj) {\n      authorsNumberOfBooks[authorBookCountObj[key]]++\n    }\n\n    const doughnutData = [authorsNumberOfBooks[1], authorsNumberOfBooks[2], authorsNumberOfBooks[3]];\n\n    const barData = this.state.barLabels.map((label) => {\n      return noAutoCompleteDuplicateObj[label] ? noAutoCompleteDuplicateObj[label].length : 0;\n    })\n\n    this.setState({ searchSuggestionsArr, noAutoCompleteDuplicateObj, barData, doughnutData });\n  }\n\n  onChangeInput = (e) => {\n    this.setState({ selectedOption: e.target.value });\n  }\n\n  componentDidMount() {\n    //once page loads hit the post request to get books\n    this.getBooks()\n      .catch(err => console.log(err));\n  }\n\n  getBooks = async () => {\n    const searchResultsArr = [];\n\n    axios.post('https://di37ol03g7.execute-api.us-west-2.amazonaws.com/dev/')\n      .then((res) => {\n\n        //filter book results whose score are higher than 75\n        for (let i = 0; i <= res.data.results.length - 1; i++) {\n          if (res.data.results[i].review_score > 74) searchResultsArr.push(res.data.results[i]);\n        }\n\n        //if there are more than 100 results take the highest scores\n        if (searchResultsArr.length > 100) {\n          searchResultsArr.sort((a, b) => {\n            if (a.review_score < b.review_score)\n              return -1;\n            if (a.review_score > b.review_score)\n              return 1;\n            return 0;\n          });\n\n          //cut off elements not in highest 100 scores\n          searchResultsArr.splice(100);\n        }\n\n        //this is to sort by title\n        searchResultsArr.sort((a, b) => {\n          if (a.title < b.title)\n            return -1;\n          if (a.title > b.title)\n            return 1;\n          return 0;\n        });\n\n        this.setState({ searchResultsArr });\n        this.buildSearchSuggestionsArr();\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  //this is where the filtering magic happens\n  handleChange = (selectedOption) => {\n    this.setState({ selectedOption, searchResultsArr: this.state.noAutoCompleteDuplicateObj[selectedOption.value] });\n  }\n\n\n  render() {\n    //display book results\n    const resultsListItems = this.state.searchResultsArr.map((book, i) => {\n      return <li className=\"row\" key={i}>\n          <h2>Title: {book.title} </h2>\n          <h2>Author: {book.author} </h2>\n          <h2>Review Score: {book.review_score} </h2>\n          <h3>Book Summary</h3>\n          <p>{book.summary}</p>\n      </li>\n    })\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Top Rated Books!</h1>\n        </header>\n        <div onKeyUp={this.onChangeInput}>\n          <Select\n            value={this.state.selectedOption}\n            onChange={this.handleChange}\n            options={this.state.searchSuggestionsArr}\n            />\n        </div>\n        <button className=\"btn green\" onClick={this.getBooks}>Refresh Books Results</button>\n        <div className=\"container\">\n          <h2>Books Review Score Bar Graph</h2>\n          <Bar\n            data={{\n              labels: this.state.barLabels,\n              datasets: [\n                {\n                  label: 'Books with this review score',\n                  backgroundColor: 'rgba(255,99,132,0.2)',\n                  borderColor: 'rgba(255,99,132,1)',\n                  borderWidth: 1,\n                  hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n                  hoverBorderColor: 'rgba(255,99,132,1)',\n                  data: this.state.barData\n                }\n              ]\n            }}\n            width={100}\n            height={50}\n            options={{\n              maintainAspectRatio: true,\n              scales: {\n                xAxes: [{}],\n                yAxes: [{\n                    ticks: {\n                      stepSize: 1\n                    }\n                }]\n              }\n            }}\n            />\n        </div>\n        <div className=\"container\">\n          <h2>Authors With 75+ Review Score Have</h2>\n          <Doughnut data={{\n              labels: this.state.doughnutLabels,\n              datasets: [{\n                data: this.state.doughnutData,\n                backgroundColor: [\n                  '#FF6384',\n                  '#36A2EB',\n                  '#FFCE56'\n                ],\n                hoverBackgroundColor: [\n                  '#FF6384',\n                  '#36A2EB',\n                  '#FFCE56'\n                ]\n              }]\n            }} />\n        </div>\n        <div>\n          <ol>\n            { resultsListItems }\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}